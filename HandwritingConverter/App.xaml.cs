using Microsoft.Data.Sqlite;
using System;
using System.IO;
using Windows.ApplicationModel;
using Windows.ApplicationModel.Activation;
using Windows.Storage;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;

namespace HandwritingConverter
{
    sealed partial class App : Application
    {
        private async static void InitialiseDatabase()
        {
            await ApplicationData.Current.LocalFolder.CreateFileAsync("handwritingConverter.db", CreationCollisionOption.OpenIfExists);
            
            string dbpath = Path.Combine(ApplicationData.Current.LocalFolder.Path, "handwritingConverter.db");
            string query = "CREATE TABLE IF NOT EXISTS convertedText (" +
                    "GUID VARCHAR(36) NOT NULL CHECK(length(GUID)==36)," +
                    "Timestamp INTEGER NOT NULL," +
                    "Converted VARCHAR(255) NOT NULL," +
                    "PRIMARY KEY (GUID) );";

            SqliteConnection connection = new SqliteConnection($"Filename={dbpath}");
            connection.Open();

            SqliteCommand command = new SqliteCommand(query, connection);
            command.ExecuteReader();
            connection.Close();
        }

        /*
        The following code was generated by Visual Studio when the project was 
        created and was slightly modified to work with my own code. 
        */

        public App()
        {
            this.InitializeComponent();
            this.Suspending += OnSuspending;

            InitialiseDatabase();
        }

        protected override void OnLaunched(LaunchActivatedEventArgs e)
        {
            Frame rootFrame = Window.Current.Content as Frame;

            if (rootFrame == null)
            {
                rootFrame = new Frame();
                rootFrame.NavigationFailed += OnNavigationFailed;
                Window.Current.Content = rootFrame;
            }

            if (e.PrelaunchActivated == false)
            {
                if (rootFrame.Content == null)
                {
                    rootFrame.Navigate(typeof(NavigationPage), e.Arguments);
                }
                Window.Current.Activate();
            }
        }

        private void OnNavigationFailed(object sender, NavigationFailedEventArgs e)
        {
            throw new Exception("Failed to load Page " + e.SourcePageType.FullName);
        }

        private void OnSuspending(object sender, SuspendingEventArgs e)
        {
            var deferral = e.SuspendingOperation.GetDeferral();
            deferral.Complete();
        }
    }
}
